<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StaryJie的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-08T07:19:20.369Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>StaryJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/08/hello-world/"/>
    <id>http://yoursite.com/2019/07/08/hello-world/</id>
    <published>2019-07-08T07:19:20.369Z</published>
    <updated>2019-07-08T07:19:20.369Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FTP服务搭建配置笔记</title>
    <link href="http://yoursite.com/2019/07/08/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/08/FTP服务搭建配置笔记/</id>
    <published>2019-07-08T07:13:26.000Z</published>
    <updated>2019-07-08T07:22:17.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、什么是文件共享服务？"><a href="#1、什么是文件共享服务？" class="headerlink" title="1、什么是文件共享服务？"></a>1、什么是文件共享服务？</h3><p>简单来说就是文件域存储块设备可以共享给他人使用。</p><h4 id="1-1-实现文件共享服务的三种方式"><a href="#1-1-实现文件共享服务的三种方式" class="headerlink" title="1.1 实现文件共享服务的三种方式"></a>1.1 实现文件共享服务的三种方式</h4><ol><li>FTP：属于应用层服务，可以跨平台使用</li><li>NFS：属于内核模式，不可以跨平台使用</li><li>Samba：可以跨平台使用</li></ol><a id="more"></a><h4 id="1-2-实现存储设备域服务器连接的三种方式"><a href="#1-2-实现存储设备域服务器连接的三种方式" class="headerlink" title="1.2 实现存储设备域服务器连接的三种方式"></a>1.2 实现存储设备域服务器连接的三种方式</h4><ol><li>DAS：连接磁盘</li><li>NAS：通过nfs/cifs协议实现网络文件共享(文件存储方式)，电子邮件、网页服务器、多媒体流服务、档案分享等就适用于NAS存储架构</li><li>SAS：通过网线或者光纤实现ISCSI和FCSAN将物理存储设备连接起来使用(块存储方式比较底层，需要格式化并挂载当本地磁盘使用)，数据库有关的应用适用于SAS存储架构</li></ol><h3 id="2、FTP简介"><a href="#2、FTP简介" class="headerlink" title="2、FTP简介"></a>2、FTP简介</h3><p>FTP是File Transfer Protocol文件传输协议的缩写，基于网络来传输文件的应用层协议。</p><p>FTP能够通过网络来传输文件，主要是因为工作再应用层所以不会受到平台的限制。</p><h4 id="2-1-FTP的工作方式"><a href="#2-1-FTP的工作方式" class="headerlink" title="2.1 FTP的工作方式"></a>2.1 FTP的工作方式</h4><p><img src="http://static.staryjie.com/static/images/20190702114521.png" alt></p><p>客户端通过TCP三次握手与服务端建立连接，连接建立成功之后才可以进行文件传输。</p><ol><li>FTP的数据传输分为命令数据与文件数据，命令传输的就是客户端要执行的命令，服务端收到后返回给客户端执行结果，如ls命令就返回给当前目录下的所有文件个目录。文件传输就是客户端要传输的数据，服务端与客户端连接来传输文件数据。</li><li>FTP的服务端与客户端建立连接大体有三个步骤，建立连接、传输数据、断开连接。</li><li>FTP是基于TCP协议来传输数据的，使用21端口来建立认证通道，20端口来建立数据通道。</li><li>FTP是明文传输的。</li><li>FTP的用户可以分为实体用户(real user)，匿名用户(anonymous user)，访客用户(guest user)。</li></ol><h4 id="2-2-FTP的工作模式"><a href="#2-2-FTP的工作模式" class="headerlink" title="2.2 FTP的工作模式"></a>2.2 FTP的工作模式</h4><p>由于现在的网络架构中都会有防火墙来阻止端口与高位端口被主动连接，特别20端口是被禁止主动连接的，因为20端口是FTP的数据端口，所以为了解决客户端或者服务端的防火墙问题，FTP就有了主动和被动两种工作模式，通过防火墙内的一端来主动连接防火墙外端的一方，这样子就不会被防火墙阻拦。</p><h5 id="2-2-1-主动模式"><a href="#2-2-1-主动模式" class="headerlink" title="2.2.1 主动模式"></a>2.2.1 主动模式</h5><p><img src="http://static.staryjie.com/static/images/20190703095025.png" alt></p><p>一般用于服务端存在防火墙的情况，客户端无法主动连接到服务端的20数据端口，需要由服务端主动连接到客户端的两个端口。</p><ol><li>两端在建立TCP通信通道后，客户端会发送port请求与服务端的21端口认证连接并开放用来建立数据连接的高位端口。</li><li>服务端在收到请求后，会通过20端口发送ACK响应请求。</li><li>服务端通过20端口与客户端发送的高位端口建立数据连接通道。</li></ol><h5 id="2-2-2-被动模式"><a href="#2-2-2-被动模式" class="headerlink" title="2.2.2 被动模式"></a>2.2.2 被动模式</h5><p><img src="http://static.staryjie.com/static/images/20190703095051.png" alt></p><p>一般用于客户端存在防火墙的情况，服务端在收到连接请求后因为客户端存在防火墙而无法达到客户端高位端口，需要客户端主动连接至服务端的数据传输端口。</p><ol><li>两端在建立TCP通信通道连接后，客户端会发送PASV请求给服务端。</li><li>服务端在收到PASV请求后就会打开一个高位端口作为数据传输端口来响应给客户端等待客户端连接。</li><li>客户端在收到响应后，就会去连接服务端响应的端口建立数据传输通道。</li></ol><h4 id="2-3-FTP的用户类型"><a href="#2-3-FTP的用户类型" class="headerlink" title="2.3 FTP的用户类型"></a>2.3 FTP的用户类型</h4><ol><li><p>匿名用户</p><p>anonymous或ftp</p></li><li><p>本地用户</p><p>账号名称、密码等信息保存在passwd、shadow文件中</p></li><li><p>虚拟用户</p><p>使用独立的账号/密码数据文件</p><p>user_list ftp_user1  123456  /var/pub</p></li></ol><h3 id="3、VSFTPD的安装及使用"><a href="#3、VSFTPD的安装及使用" class="headerlink" title="3、VSFTPD的安装及使用"></a>3、VSFTPD的安装及使用</h3><p>官方网站：<a href="http://vsftpd.beasts.org" target="_blank" rel="noopener">http://vsftpd.beasts.org</a></p><h4 id="3-1-关闭防火墙和SELINUX"><a href="#3-1-关闭防火墙和SELINUX" class="headerlink" title="3.1 关闭防火墙和SELINUX"></a>3.1 关闭防火墙和SELINUX</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disabled firewalled.service</span><br><span class="line"><span class="meta">#</span> 2.关闭SELINUX</span><br><span class="line"><span class="meta">#</span># 2.1 永久关闭，需要重启服务器</span><br><span class="line">sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/sysconfig/selinux</span><br><span class="line">reboot</span><br><span class="line"><span class="meta">#</span># 2.2 临时关闭</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h4 id="3-2-安装vsftpd"><a href="#3-2-安装vsftpd" class="headerlink" title="3.2 安装vsftpd"></a>3.2 安装vsftpd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure><h4 id="3-3-查看安装生成的文件"><a href="#3-3-查看安装生成的文件" class="headerlink" title="3.3 查看安装生成的文件"></a>3.3 查看安装生成的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@ftp ~]# rpm -qa|grep vsftpd</span><br><span class="line">vsftpd-3.0.2-25.el7.x86_64</span><br><span class="line">[root@ftp ~]# rpm -ql vsftpd</span><br><span class="line">/etc/logrotate.d/vsftpd</span><br><span class="line">/etc/pam.d/vsftpd# pam认证文件</span><br><span class="line">/etc/vsftpd</span><br><span class="line">/etc/vsftpd/ftpusers# 限制登录文件</span><br><span class="line">/etc/vsftpd/user_list</span><br><span class="line">/etc/vsftpd/vsftpd.conf# 主配置文件</span><br><span class="line">/etc/vsftpd/vsftpd_conf_migrate.sh</span><br><span class="line">/usr/lib/systemd/system-generators/vsftpd-generator</span><br><span class="line">/usr/lib/systemd/system/vsftpd.service</span><br><span class="line">/usr/lib/systemd/system/vsftpd.target</span><br><span class="line">/usr/lib/systemd/system/vsftpd@.service</span><br><span class="line">/usr/sbin/vsftpd# 程序文件</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/AUDIT</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/BENCHMARKS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/BUGS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/COPYING</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/Changelog</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/vsftpd.conf</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/vsftpd.xinetd</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD/vsftpd.conf</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG/hosts.allow</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_HOSTS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_HOSTS/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/logins.txt</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/vsftpd.conf</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/vsftpd.pam</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS_2</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS_2/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/FAQ</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/INSTALL</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/LICENSE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/README.security</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/REWARD</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/DESIGN</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/IMPLEMENTATION</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/OVERVIEW</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/TRUST</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SIZE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SPEED</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/TODO</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/TUNING</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/vsftpd.xinetd</span><br><span class="line">/usr/share/man/man5/vsftpd.conf.5.gz</span><br><span class="line">/usr/share/man/man8/vsftpd.8.gz</span><br><span class="line">/var/ftp# FTP家目录</span><br><span class="line">/var/ftp/pub</span><br><span class="line">[root@ftp ~]#</span><br></pre></td></tr></table></figure><h4 id="3-4-基于匿名用户的访问控制"><a href="#3-4-基于匿名用户的访问控制" class="headerlink" title="3.4 基于匿名用户的访问控制"></a>3.4 基于匿名用户的访问控制</h4><p>要配置基于匿名用户的访问控制，需要修改vsftpd的主配置文件<code>/etc/vsftpd/vsftpd.conf</code>，主要有下面几个参数：</p><ul><li>anonymous_enable=YES：启用匿名用户</li><li>anon_upload_enable=YES：允许匿名用户上传文件</li><li>anon_mkdir_write_enable=YES：是否允许匿名用户创建目录，要考虑文件系统上的家目录，必须要有写权限</li><li>anon_other_write_enable=YES：允许匿名用户更多于上传或者建立目录之外的权限，譬如删除或者重命名</li><li>anon_umask=077：指定上传文件的默认所有者和权限</li></ul><h5 id="3-4-1-运行匿名用户登录"><a href="#3-4-1-运行匿名用户登录" class="headerlink" title="3.4.1 运行匿名用户登录"></a>3.4.1 运行匿名用户登录</h5><p>不修改配置文件直接启动后，直接通过FTP软件连接即可，用户名默认是ftp，没有密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190703141914.png" alt></p><p>但是此时匿名用户是不能上传文件和创建目录的：</p><p><img src="http://static.staryjie.com/static/images/20190703142455.png" alt></p><h5 id="3-4-2-运行匿名用户上传文件、创建目录"><a href="#3-4-2-运行匿名用户上传文件、创建目录" class="headerlink" title="3.4.2 运行匿名用户上传文件、创建目录"></a>3.4.2 运行匿名用户上传文件、创建目录</h5><p>开启允许匿名用户上传文件和创建文件夹的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/vsftpd/</span><br><span class="line">vim vsftpd.conf</span><br><span class="line"><span class="meta">#</span> 开启下面三个权限</span><br><span class="line">anonymous_enable=YES</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"><span class="meta">#</span> 进入ftp家目录，创建一个文件夹并授权</span><br><span class="line">[root@ftp ~]# cd /var/ftp/</span><br><span class="line">[root@ftp ftp]# mkdir -p ./testdir</span><br><span class="line">[root@ftp ftp]# setfacl -m u:ftp:rwx ./testdir/</span><br><span class="line">[root@ftp ftp]# getfacl ./testdir/</span><br><span class="line"><span class="meta">#</span> file: testdir/</span><br><span class="line"><span class="meta">#</span> owner: root</span><br><span class="line"><span class="meta">#</span> group: root</span><br><span class="line">user::rwx</span><br><span class="line">user:ftp:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line">[root@ftp ftp]#</span><br></pre></td></tr></table></figure><p>重新登录ftp，在testdir目录中可以创建目录和上传文件，但是却没有删除文件和重命名文件的权限。</p><p><img src="http://static.staryjie.com/static/images/20190705170142.png" alt></p><h5 id="3-4-3-开启匿名用户删除和重命名权限"><a href="#3-4-3-开启匿名用户删除和重命名权限" class="headerlink" title="3.4.3 开启匿名用户删除和重命名权限"></a>3.4.3 开启匿名用户删除和重命名权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span> 增加下面的内容，重启vsftpd服务</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>测试删除文件和重命名：</p><p><img src="http://static.staryjie.com/static/images/20190703145738.png" alt></p><h4 id="3-5-基于本地用户的访问控制"><a href="#3-5-基于本地用户的访问控制" class="headerlink" title="3.5 基于本地用户的访问控制"></a>3.5 基于本地用户的访问控制</h4><p>默认情况下，操作系统的账户是可以直接使用用户名和密码登陆的。并且登陆之后，默认进入自己的家目录。</p><p>基于本地用户的访问控制也通过修改vsftpd的配置文件来实现，主要有一下几个参数：</p><ol><li>local_enable=YES：是否允许Linux用户登录，默认是允许的，当然也可以禁止</li><li>write_enable=YES：是否允许系统用户上传文件</li><li>local_root=/ftproot：非匿名用户登录所在目录，当使用Linux用户登录成功之后，就不会默认在自己的家目录了。相反，会位于指定的目录之下</li><li>local_umask=022：指定系统用户上传文件的默认权限</li></ol><h5 id="3-5-1-允许系统用户登录并上传文件"><a href="#3-5-1-允许系统用户登录并上传文件" class="headerlink" title="3.5.1 允许系统用户登录并上传文件"></a>3.5.1 允许系统用户登录并上传文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span> 默认以下三个参数都是开启的</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加一个系统用户并设置密码</span><br><span class="line">useradd centos</span><br><span class="line">echo "123456"|passwd --stdin centos</span><br></pre></td></tr></table></figure><p>系统用户默认具有上传文件、创建目录、删除和重命名的权限。</p><p><img src="http://static.staryjie.com/static/images/20190703150846.png" alt></p><p>系统用户默认也可以进入其他目录，所以并不安全，所以如果要启用系统用户登陆FTP那么就要修改配置文件，禁止系统用户访问除了家目录以外的其他目录。</p><h5 id="3-5-2-配置本地用户只能访问自己的家目录"><a href="#3-5-2-配置本地用户只能访问自己的家目录" class="headerlink" title="3.5.2 配置本地用户只能访问自己的家目录"></a>3.5.2 配置本地用户只能访问自己的家目录</h5><p>修改vsftpd.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span> 开启下面的参数</span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="meta">#</span> 这个参数是全局的，开启后所有的本地用户都不能访问除了家目录以外的目录</span><br></pre></td></tr></table></figure><p>但是开启这个参数之后，由于vsftpd更新到2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。</p><p>要解决这个错误有两种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.方式一：将对应家目录的写权限去除</span><br><span class="line">chmod a-w /home/centos</span><br><span class="line"><span class="meta">#</span> 2.方式二：在配置文件在加入下面的参数</span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure><h5 id="3-5-3-配置指定的本地用户只能访问家目录"><a href="#3-5-3-配置指定的本地用户只能访问家目录" class="headerlink" title="3.5.3 配置指定的本地用户只能访问家目录"></a>3.5.3 配置指定的本地用户只能访问家目录</h5><p>配置指定用户只能访问家目录，其他用户可以访问其他目录，需要在配置文件中关闭全局设置的参数<code>allow_writeable_chroot=YES</code>，开启下面两个参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure><p>然后需要创建指定的文件<code>chroot_list</code>并在文件中指定对应的用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/chroot_list</span><br><span class="line"><span class="meta">#</span> 限制只能在家目录</span><br><span class="line">centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启vsftpd服务</span><br><span class="line">systemctl restart vsftpd.service</span><br><span class="line"><span class="meta">#</span> 新建一个用户并设置密码</span><br><span class="line">useradd redhat</span><br><span class="line">echo "123456"|passwd --stdin redhat</span><br></pre></td></tr></table></figure><p>用centos用户访问，只能在自己的家目录中：</p><p><img src="http://static.staryjie.com/static/images/20190703162409.png" alt></p><p>用redhat用户访问，可以访问除了家目录以外的其他目录：</p><p><img src="http://static.staryjie.com/static/images/20190703162439.png" alt></p><h4 id="3-6-设置chroot"><a href="#3-6-设置chroot" class="headerlink" title="3.6 设置chroot"></a>3.6 设置chroot</h4><p>在默认配置中，本地用户可以切换到自己家目录以外的其他目录进行浏览，并在权限许可的范围内进行下载和上传。这样的设置对于一个FTP服务器来说是不安全的。</p><p>如果希望本地用户登录之后不能访问除了家目录以外的目录，则需要设置chroot选项，具体设置下面三个选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user</span><br><span class="line">chroot_list_enable</span><br><span class="line">chroot_list_file</span><br></pre></td></tr></table></figure><h5 id="3-6-1-设置所有用户只需chroot"><a href="#3-6-1-设置所有用户只需chroot" class="headerlink" title="3.6.1 设置所有用户只需chroot"></a>3.6.1 设置所有用户只需chroot</h5><p>只需要将<code>chroot_local_user</code>选项设置为<code>YES</code>，所有的本地用户都只能访问自己的家目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES</span><br></pre></td></tr></table></figure><h5 id="2-6-2-设置部分指定用户执行chroot"><a href="#2-6-2-设置部分指定用户执行chroot" class="headerlink" title="2.6.2 设置部分指定用户执行chroot"></a>2.6.2 设置部分指定用户执行chroot</h5><p>需要注释全局的设置或者设为NO，然后开启另外两个选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=NO</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vaftpd/chroot_list</span><br></pre></td></tr></table></figure><p>这样，文件<code>/etc/vaftpd/chroot_list</code>中的用户就只能访问自己的家目录，其他本地用户可以访问除了家目录的其他目录。</p><p>配置基于本地用户的访问限制，需要修改配置文件，主要有以下两种方式：</p><ol><li><p>限制指定的本地用户不能访问，而其他本地用户可以访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=YES</span><br><span class="line">userlist_file=/etc/vsftpd/user_list</span><br></pre></td></tr></table></figure><p>使文件/etc/vsftpd/user_list中指定的本地用户不能访问FTP服务器，而其他的本地用户可以访问FTP服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=NO</span><br><span class="line">userlist_file=/etc/vsftpd/user_list</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-7-提示信息"><a href="#3-7-提示信息" class="headerlink" title="3.7 提示信息"></a>3.7 提示信息</h4><h5 id="3-7-1-登陆提示信息"><a href="#3-7-1-登陆提示信息" class="headerlink" title="3.7.1 登陆提示信息"></a>3.7.1 登陆提示信息</h5><p>登陆提示信息图形界面(FTP软件)是看不到的，只适用于ftp作为客户端的时候。可以使用下面的方式进行配置。但是优先级却不一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 如果限制用户只能访问家目录，下面这个配置优先生效</span><br><span class="line">ftpd_banner="Welcome to Mage Ftp Server!"</span><br><span class="line"><span class="meta">#</span> 下面这个优先级较上一个配置低</span><br><span class="line">banner_file=/etc/vsftpd/ftpbanner.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 其他情况当两个配置都在的时候，默认banner_file的优先生效</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190703165059.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190703164725.png" alt></p><h5 id="3-7-2-访问目录提示信息"><a href="#3-7-2-访问目录提示信息" class="headerlink" title="3.7.2 访问目录提示信息"></a>3.7.2 访问目录提示信息</h5><p>当用户进入某一目录后，可以给用户一个提示消息。用来提示这个目录的作用。在相应的目录下新建一个隐藏文件<code>.message</code>，该文件中进行提示信息描述。需要添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dirmessage_enable=YES</span><br><span class="line">message_file=.message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在/var/ftp/pub下新建.message</span><br><span class="line">vim /var/ftp/pub/.message</span><br><span class="line">This is the public floder.</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190703165457.png" alt></p><h4 id="3-8-进一步配置VSFTPD"><a href="#3-8-进一步配置VSFTPD" class="headerlink" title="3.8 进一步配置VSFTPD"></a>3.8 进一步配置VSFTPD</h4><h5 id="3-8-1-最大传输速率限制"><a href="#3-8-1-最大传输速率限制" class="headerlink" title="3.8.1 最大传输速率限制"></a>3.8.1 最大传输速率限制</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_max_rate=50000</span><br><span class="line">anon_max_rate=30000</span><br></pre></td></tr></table></figure><p>上面的设置是将本地用户的最大传输速率限制为50kbytes/s，匿名用户最大传输速率限制为30kbytes/s。</p><h5 id="3-8-2-设置客户端连接时的端口范围"><a href="#3-8-2-设置客户端连接时的端口范围" class="headerlink" title="3.8.2 设置客户端连接时的端口范围"></a>3.8.2 设置客户端连接时的端口范围</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pasv_min_port=50000</span><br><span class="line">pasv_max_port=60000</span><br></pre></td></tr></table></figure><p>上面的设置将客户端连接时的端口范围限制在50000-60000之间，提高系统安全性。</p><h5 id="3-8-3-基本性能和安全选项配置"><a href="#3-8-3-基本性能和安全选项配置" class="headerlink" title="3.8.3 基本性能和安全选项配置"></a>3.8.3 基本性能和安全选项配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.设置空闲用户会话中断时间(单位:秒)</span><br><span class="line">idle_session_timeout=6000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.设置空闲的数据连接的终端时间(单位:秒)</span><br><span class="line">date_connection_timeout=120</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.设置客户端空闲时的自动中断和激活连接时间(单位:秒)</span><br><span class="line">accept_timeout=60</span><br><span class="line">connect_timeout=60</span><br><span class="line"><span class="meta">#</span> 上面的配置将是客户端1分钟后自动中断，在中断一分钟后自动激活连接</span><br></pre></td></tr></table></figure><h3 id="4、VSFTPD虚拟用户"><a href="#4、VSFTPD虚拟用户" class="headerlink" title="4、VSFTPD虚拟用户"></a>4、VSFTPD虚拟用户</h3><h4 id="4-1-虚拟用户"><a href="#4-1-虚拟用户" class="headerlink" title="4.1 虚拟用户"></a>4.1 虚拟用户</h4><ul><li>所有虚拟用户会统一映射为一个指定的系统账号：访问共享设置，即为此系统账号的家目录。</li><li>各虚拟账户可以被赋予不同的访问权限，通过匿名用户的权限控制参数进行指定。</li></ul><h4 id="4-2-虚拟账号的存储方式"><a href="#4-2-虚拟账号的存储方式" class="headerlink" title="4.2 虚拟账号的存储方式"></a>4.2 虚拟账号的存储方式</h4><h5 id="4-2-1-文本"><a href="#4-2-1-文本" class="headerlink" title="4.2.1 文本"></a>4.2.1 文本</h5><p>编辑文本文件，该文件需要被编码为hash格式。奇数行为用户名、偶数行为密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_load -T -t hash -f vusers.txt vusers.db</span><br></pre></td></tr></table></figure><ul><li><p>基于文件验证的vsftpd虚拟用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.创建用户数据库文件</span><br><span class="line">vim /etc/vsftpd/vusers.txt</span><br><span class="line">zhangsan</span><br><span class="line">123456</span><br><span class="line">lisi</span><br><span class="line">123456</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2. 生成数据库文件</span><br><span class="line">cd /etc/vsftpd/</span><br><span class="line">db_load -T -t hash -f vusers.txt vusers.db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.修改数据库文件权限</span><br><span class="line">chmod 600 ./vusers.db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4.创建系统用户和访问FTP目录</span><br><span class="line"><span class="meta">#</span> 创建系统用户并指定家目录</span><br><span class="line">useradd -d /var/ftproot -s /sbin/nologin vuser</span><br><span class="line"><span class="meta">#</span> 修改家目录权限</span><br><span class="line">chmod +rwx /var/ftproot</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5.创建pam配置文件</span><br><span class="line"><span class="meta">#</span> 修改pam配置文件，让vsftpd支持pam模块进行身份验证</span><br><span class="line">vim /etc/pam.d/vsftpd.db</span><br><span class="line">auth required pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line">account required pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6.修改vsftpd主配置文件指定pam配置文件</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vuser</span><br><span class="line">pam_service_name=vsftpd.db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 7.修改虚拟用户权限配置</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers.d/</span><br><span class="line"><span class="meta">#</span> 创建配置目录并给用户设置权限(权限配置文件与用户名一样)</span><br><span class="line">mkdir -p /etc/vsftpd/vusers.d/</span><br><span class="line">cd /etc/vsftpd/vusers.d/</span><br><span class="line"><span class="meta">#</span> 给zhangsan设置权限</span><br><span class="line">vim zhangsan</span><br><span class="line"><span class="meta">#</span> 虚拟用户上传权限</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"><span class="meta">#</span> 虚拟用户创建文件夹</span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line"><span class="meta">#</span> 虚拟的其他用户对指定用户目录的写权限</span><br><span class="line">anon_other_write_enable=NO</span><br><span class="line"><span class="meta">#</span> 修改登录目录至其他目录</span><br><span class="line"><span class="meta">#</span> local_root=/ftproot</span><br></pre></td></tr></table></figure><p>重启vsftpd服务，用zhangsan用户登录，只能上传文件，不能创建文件夹和删除文件：</p><p><img src="http://static.staryjie.com/static/images/20190705150335.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 给lisi配置权限</span><br><span class="line">cd /etc/vsftpd/vusers.d/</span><br><span class="line">vim lisi</span><br><span class="line"><span class="meta">#</span> 虚拟用户上传权限</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"><span class="meta">#</span> 虚拟用户创建文件夹</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"><span class="meta">#</span> 虚拟的其他用户对指定用户目录的写权限</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"><span class="meta">#</span> 修改登录目录至其他目录</span><br><span class="line"><span class="meta">#</span>local_root=/ftproot</span><br></pre></td></tr></table></figure><p>重启vsftpd服务，用lisi账号登陆，可以上传、新建、删除：</p><p><img src="http://static.staryjie.com/static/images/20190705150834.png" alt></p></li></ul><h5 id="4-2-2-关系型数据库"><a href="#4-2-2-关系型数据库" class="headerlink" title="4.2.2 关系型数据库"></a>4.2.2 关系型数据库</h5><p>实时查询数据库完成用户认证。</p><ul><li><p>MySQL</p><p><a href="https://www.cnblogs.com/zhenhui/p/5916116.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhenhui/p/5916116.html</a></p><p>pam需要依赖于pam_mysql</p><ul><li>/lib/security/pam_mysql.so</li><li>/usr/share/doc/pam_mysql-0.7/README</li></ul></li></ul><ol><li>安装MySQL及pam_mysql插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mariadb-server pam-devel mariadb-devel vsftpd ftp</span><br><span class="line"><span class="meta">#</span> 下载pam_mysql源码包</span><br><span class="line">wget http://www.huzs.net/soft/vsftpd/pam_mysql-0.7RC1.tar.gz</span><br><span class="line"><span class="meta">#</span> 编译安装pam_mysql</span><br><span class="line">tar xf pam_mysql-0.7RC1.tar.gz &amp;&amp; cd pam_mysql-0.7RC1</span><br><span class="line">./configure --with-openssl --with-pam-mods-dir=/lib/security/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="2"><li>创建vsftpd数据库和用户表</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动数据库</span><br><span class="line">systemctl enable mariadb.service</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line"><span class="meta">#</span> 初始化数据库</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> vsftpd;</span><br><span class="line"><span class="keyword">use</span> vsftpd;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="built_in">binary</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">char</span>(<span class="number">48</span>) <span class="built_in">binary</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190705154517.png" alt></p><ol start="3"><li>创建虚拟用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">name</span>,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)),(<span class="string">'tom'</span>,<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>));</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190705154758.png" alt></p><ol start="4"><li>授权</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> vsftpd.* <span class="keyword">TO</span> <span class="string">'vsftpd'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'vsftpdpass'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> vsftpd.* <span class="keyword">TO</span> <span class="string">'vsftpd'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'vsftpdpass'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>配置pam认证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.建立pam认证所需文件</span><br><span class="line">vim /etc/pam.d/vsftpd.mysql</span><br><span class="line"><span class="meta">#</span> 2.添加下面两行</span><br><span class="line">auth required /lib/security/pam_mysql.so user=vsftpd passwd=vsftpdpass host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2</span><br><span class="line">account required /lib/security/pam_mysql.so user=vsftpd passwd=vsftpdpass host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2</span><br></pre></td></tr></table></figure><ol start="6"><li>创建虚拟用户的映射用户</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin -d /var/ftproot vuser</span><br><span class="line">setfacl -m u:vuser:rwx /var/ftproot</span><br></pre></td></tr></table></figure><ol start="7"><li>修改vsftpd的配置文件，使其适应mysql认证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">pam_service_name=vsftpd.mysql</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vuser</span><br></pre></td></tr></table></figure><ol start="8"><li>配置虚拟用户具有不同的访问权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.配置虚拟用户有单独的权限设定</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers_conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.创建所需目录，并为虚拟用户提供配置文件</span><br><span class="line">mkdir /etc/vsftpd/vusers_conf</span><br><span class="line">cd /etc/vsftpd/vusers_conf</span><br><span class="line"><span class="meta">#</span> 配置虚拟用户具有不同的访问权限</span><br><span class="line">vim jack</span><br><span class="line"><span class="meta">#</span> 写入以下内容</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line">vim tom</span><br><span class="line"><span class="meta">#</span> 写入以下内容</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line">anon_other_write_enable=NO</span><br></pre></td></tr></table></figure><ol start="9"><li>重启vsftpd服务并测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>登陆jack账户，有上传、新建、删除、重命名的权限：</p><p><img src="http://static.staryjie.com/static/images/20190705161128.png" alt></p><p>登陆tom账户，只有上传的权限：</p><p><img src="http://static.staryjie.com/static/images/20190705161328.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、什么是文件共享服务？&quot;&gt;&lt;a href=&quot;#1、什么是文件共享服务？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是文件共享服务？&quot;&gt;&lt;/a&gt;1、什么是文件共享服务？&lt;/h3&gt;&lt;p&gt;简单来说就是文件域存储块设备可以共享给他人使用。&lt;/p&gt;
&lt;h4 id=&quot;1-1-实现文件共享服务的三种方式&quot;&gt;&lt;a href=&quot;#1-1-实现文件共享服务的三种方式&quot; class=&quot;headerlink&quot; title=&quot;1.1 实现文件共享服务的三种方式&quot;&gt;&lt;/a&gt;1.1 实现文件共享服务的三种方式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;FTP：属于应用层服务，可以跨平台使用&lt;/li&gt;
&lt;li&gt;NFS：属于内核模式，不可以跨平台使用&lt;/li&gt;
&lt;li&gt;Samba：可以跨平台使用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker构建持续集成环境</title>
    <link href="http://yoursite.com/2019/07/08/Docker%E6%9E%84%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/07/08/Docker构建持续集成环境/</id>
    <published>2019-07-08T06:54:51.000Z</published>
    <updated>2019-07-08T07:21:57.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、CI-CD介绍"><a href="#1、CI-CD介绍" class="headerlink" title="1、CI/CD介绍"></a>1、CI/CD介绍</h3><p>​        CI/CD是一个持续的闭环的流程。</p><p><img src="http://static.staryjie.com/static/images/20190626160504.png" alt="CI/CD"></p><a id="more"></a><h4 id="1-1-什么是CI？"><a href="#1-1-什么是CI？" class="headerlink" title="1.1 什么是CI？"></a>1.1 什么是CI？</h4><p>​        在软件工程中，持续集成（CI）是指将所有开发者的工作副本每天多次合并到主干的做法。Grady Booch 在1991年的 Booch method 中首次命名并提出了 CI 的概念，尽管在当时他并不主张每天多次集成。而 XP（Extreme programming，极限编程）采用了 CI 的概念，并提倡每天不止一次集成。</p><h4 id="1-2-什么是CD？"><a href="#1-2-什么是CD？" class="headerlink" title="1.2 什么是CD？"></a>1.2 什么是CD？</h4><p>​        持续交付/持续部署(CD)就是在持续集成的基础上，产品不断的迭代更新，最终能够交付到客户手中或者部署到生成环境。</p><h4 id="1-3-CI-CD的优点"><a href="#1-3-CI-CD的优点" class="headerlink" title="1.3 CI/CD的优点"></a>1.3 CI/CD的优点</h4><p>1.解放了重复性劳动</p><p>   自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</p><p>2.更快地修复问题</p><p>   持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</p><p>3.更快的交付成果</p><p>   更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</p><p>4.减少手工的错误</p><p>   在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</p><p>5.减少了等待时间</p><p>   缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</p><p>6.更高的产品质量</p><p>   集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</p><h4 id="1-4-CI-CD最佳实践"><a href="#1-4-CI-CD最佳实践" class="headerlink" title="1.4 CI/CD最佳实践"></a>1.4 CI/CD最佳实践</h4><p>1.频繁检出代码</p><p>   有时候代码冲突无可避免，频繁检出代码，可以让本地的副本和代码库中的版本最小差异化。</p><p>2.频繁提交代码</p><p>   与频繁检出代码的原理类似，频繁提交代码，可以让其他人检出副本和代码库中的版本最小差异化。</p><p>3.减少分支，回归主干</p><p>   多个分支并行应及早将变更集成到主干中，避免同时维护软件的多个版本。</p><p>4.使用自动化构建</p><p>   可以使用Maven、Ant等来实现自动化构建，可以在构建过程中实现自动化测试。前提是有写单元测试用例。</p><p>5.提交测试</p><p>   在提交工作之前，每个程序员必须本地集成所有代码，做一个完整的构建和运行，并通过所有的单元测试，这样能减少集成测试在集成服务器上构建失败的风险。</p><p>6.当前状态对每个人都可见</p><p>   集成服务器在持续集成过程中发现问题应及时发送警告给相关的干系人。</p><h3 id="2、发布流程设计"><a href="#2、发布流程设计" class="headerlink" title="2、发布流程设计"></a>2、发布流程设计</h3><p><img src="http://static.staryjie.com/static/images/20190627094657.png" alt></p><h4 id="2-1-发布流程"><a href="#2-1-发布流程" class="headerlink" title="2.1 发布流程"></a>2.1 发布流程</h4><ol><li>开发将代码提交到Git服务器(GitLab/GitHub/SVN等)</li><li>Jenkins拉取Git服务器上的代码通过Maven或者Ant构建</li><li>docker结合脚本(docker build &amp; docker run)将构建好的代码封装在docker镜像中并推送到Docker镜像仓库</li><li>不同的环境的配置文件可以通过配置中心来配置，测试环境拉取对应的镜像和配置文件到测试环境中运行</li><li>测试通过后，结合配置中心，拉取镜像和正式环境配置文件，在正式环境中运行</li></ol><h4 id="2-2-配置中心的必要性"><a href="#2-2-配置中心的必要性" class="headerlink" title="2.2 配置中心的必要性"></a>2.2 配置中心的必要性</h4><p>​        配置中心能够根据不同的环境配置好不同的配置文件，免去了人工替换配置文件的步骤，减少了出错率，大大的提高持续集成、持续部署、持续交付的效率。目前常用的配置中心有<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">apollo</a>和<a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">disconf</a>等。</p><p>​        配置中心的搭建可以在网上找到各种文档，也可以在参考官方的安装文档。<a href="https://blog.csdn.net/luhong327/article/details/81453001" target="_blank" rel="noopener">apollo安装</a>、<a href="https://www.cnblogs.com/garfieldcgf/p/6439221.html" target="_blank" rel="noopener">disconf安装</a></p><h3 id="3、部署Git服务器"><a href="#3、部署Git服务器" class="headerlink" title="3、部署Git服务器"></a>3、部署Git服务器</h3><h4 id="3-1-安装git"><a href="#3-1-安装git" class="headerlink" title="3.1 安装git"></a>3.1 安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h4 id="3-2-添加git用户并设置密码"><a href="#3-2-添加git用户并设置密码" class="headerlink" title="3.2 添加git用户并设置密码"></a>3.2 添加git用户并设置密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure><h4 id="3-3-创建项目"><a href="#3-3-创建项目" class="headerlink" title="3.3 创建项目"></a>3.3 创建项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.切换到git用户</span><br><span class="line">su - git</span><br><span class="line"><span class="meta">#</span> 2.创建项目</span><br><span class="line">mkdir -p solo.git</span><br><span class="line">cd solo.git/</span><br><span class="line"><span class="meta">#</span> 3.初始化项目</span><br><span class="line">git --bare init</span><br></pre></td></tr></table></figure><h4 id="4-4-Jenkins服务器实现免密码交互"><a href="#4-4-Jenkins服务器实现免密码交互" class="headerlink" title="4.4 Jenkins服务器实现免密码交互"></a>4.4 Jenkins服务器实现免密码交互</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.生成私钥</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span> 2.将公钥发送到Git服务器</span><br><span class="line">ssh-copy-id git@10.0.0.20</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629160945.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190629161138.png" alt></p><h3 id="4、部署Harbor镜像仓库"><a href="#4、部署Harbor镜像仓库" class="headerlink" title="4、部署Harbor镜像仓库"></a>4、部署Harbor镜像仓库</h3><h4 id="4-1-部署方式"><a href="#4-1-部署方式" class="headerlink" title="4.1 部署方式"></a>4.1 部署方式</h4><ol><li>在线安装</li><li>离线安装</li><li>OVA程序安装</li></ol><h4 id="4-2-离线安装"><a href="#4-2-离线安装" class="headerlink" title="4.2 离线安装"></a>4.2 离线安装</h4><h5 id="4-2-1-安装docker和docker-compose"><a href="#4-2-1-安装docker和docker-compose" class="headerlink" title="4.2.1 安装docker和docker-compose"></a>4.2.1 安装docker和docker-compose</h5><p>​        因为Harbor离线安装方式是基于docker-compose编排安装的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.获取docker-compose</span><br><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span> 2.给予可执行权限</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span> 3.加入环境变量，有多种方式，个人认为下面的方式最简单有效</span><br><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"><span class="meta">#</span> 4.检查</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h5 id="4-2-2-下载Harbor离线安装包"><a href="#4-2-2-下载Harbor离线安装包" class="headerlink" title="4.2.2 下载Harbor离线安装包"></a>4.2.2 下载Harbor离线安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Harbor下载地址https://github.com/goharbor/harbor/releases</span><br><span class="line">cd /opt &amp;&amp; wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.0.tgz</span><br></pre></td></tr></table></figure><h5 id="4-2-3-安装Harbor"><a href="#4-2-3-安装Harbor" class="headerlink" title="4.2.3 安装Harbor"></a>4.2.3 安装Harbor</h5><h6 id="4-2-3-1-解压安装包"><a href="#4-2-3-1-解压安装包" class="headerlink" title="4.2.3.1 解压安装包"></a>4.2.3.1 解压安装包</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.解压安装包</span><br><span class="line">tar xf harbor-offline-installer-v1.8.0.tar</span><br></pre></td></tr></table></figure><h6 id="4-2-3-2-修改配置文件"><a href="#4-2-3-2-修改配置文件" class="headerlink" title="4.2.3.2 修改配置文件"></a>4.2.3.2 修改配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/harbor/harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: harbor.biu2ful.xyz</span><br><span class="line">https:</span><br><span class="line">   port: 443</span><br><span class="line">   certificate: /etc/docker/certs.d/harbor.biu2ful.xyz/ca.crt</span><br><span class="line">   private_key: /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key</span><br><span class="line">harbor_admin_password: Harbor123456</span><br><span class="line">database:</span><br><span class="line">  password: root123</span><br><span class="line">data_volume: /data</span><br><span class="line">clair:</span><br><span class="line">  updaters_interval: 12</span><br><span class="line">  http_proxy:</span><br><span class="line">  https_proxy:</span><br><span class="line">  no_proxy: 127.0.0.1,localhost,core,registry</span><br><span class="line">jobservice:</span><br><span class="line">  max_job_workers: 10</span><br><span class="line">chart:</span><br><span class="line">  absolute_url: disabled</span><br><span class="line">log:</span><br><span class="line">  level: info</span><br><span class="line">  rotate_count: 50</span><br><span class="line">  rotate_size: 200M</span><br><span class="line">  location: /var/log/harbor</span><br><span class="line">_version: 1.8.0</span><br></pre></td></tr></table></figure><p>​        精简后的配置文件如下图：</p><p><img src="http://static.staryjie.com/static/images/20190630212517.png" alt></p><h6 id="4-2-3-3-生成对应的签名证书文件"><a href="#4-2-3-3-生成对应的签名证书文件" class="headerlink" title="4.2.3.3 生成对应的签名证书文件"></a>4.2.3.3 生成对应的签名证书文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.创建证书存放路径</span><br><span class="line">mkdir -p /etc/docker/certs.d/harbor.biu2ful.xyz/</span><br><span class="line"><span class="meta">#</span> 2.生成自签名证书key文件</span><br><span class="line">openssl genrsa -out /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key 2048</span><br><span class="line"><span class="meta">#</span> 3.生成自签名证书crt文件</span><br><span class="line">openssl req -x509 -new -nodes -key /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key -subj "/CN=harbor.biu2ful.xyz" -days 100000 -out /etc/docker/certs.d/harbor.biu2ful.xyz/ca.crt</span><br></pre></td></tr></table></figure><h6 id="4-2-3-4-配置Harbor"><a href="#4-2-3-4-配置Harbor" class="headerlink" title="4.2.3.4 配置Harbor"></a>4.2.3.4 配置Harbor</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/harbor/ &amp;&amp; ./prepare</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215243.png" alt></p><h6 id="4-2-3-4-安装Harbor"><a href="#4-2-3-4-安装Harbor" class="headerlink" title="4.2.3.4 安装Harbor"></a>4.2.3.4 安装Harbor</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215318.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190630215331.png" alt></p><h4 id="4-3-客户端配置"><a href="#4-3-客户端配置" class="headerlink" title="4.3 客户端配置"></a>4.3 客户端配置</h4><h5 id="4-3-1-创建证书存放路径"><a href="#4-3-1-创建证书存放路径" class="headerlink" title="4.3.1 创建证书存放路径"></a>4.3.1 创建证书存放路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/harbor.biu2ful.xyz/</span><br></pre></td></tr></table></figure><h5 id="4-3-2-获取自签名证书crt文件"><a href="#4-3-2-获取自签名证书crt文件" class="headerlink" title="4.3.2 获取自签名证书crt文件"></a>4.3.2 获取自签名证书crt文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从Harbor所在服务器scp证书文件到docker客户端，其中10.0.0.30是docker客户端的地址，根据自己的对应修改。</span><br><span class="line">scp ca.crt root@10.0.0.30:/etc/docker/certs.d/harbor.biu2ful.xyz/</span><br></pre></td></tr></table></figure><h5 id="4-3-3-重启docker服务"><a href="#4-3-3-重启docker服务" class="headerlink" title="4.3.3 重启docker服务"></a>4.3.3 重启docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h4 id="4-4-测试是否能够正常使用"><a href="#4-4-测试是否能够正常使用" class="headerlink" title="4.4 测试是否能够正常使用"></a>4.4 测试是否能够正常使用</h4><h5 id="4-4-1浏览器访问"><a href="#4-4-1浏览器访问" class="headerlink" title="4.4.1浏览器访问"></a>4.4.1浏览器访问</h5><p>​        访问：<a href="https://harbor.biu2ful.xyz/" target="_blank" rel="noopener">https://harbor.biu2ful.xyz/</a></p><p><img src="http://static.staryjie.com/static/images/20190630215555.png" alt></p><h5 id="4-4-2-docker客户端登陆"><a href="#4-4-2-docker客户端登陆" class="headerlink" title="4.4.2 docker客户端登陆"></a>4.4.2 docker客户端登陆</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login harbor.biu2ful.xyz</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215733.png" alt></p><h5 id="4-4-3-推送和拉取镜像"><a href="#4-4-3-推送和拉取镜像" class="headerlink" title="4.4.3 推送和拉取镜像"></a>4.4.3 推送和拉取镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 推送镜像到Harbor仓库</span><br><span class="line">docker tag mysql:5.6 harbor.biu2ful.xyz/library/mysql:5.6</span><br><span class="line">docker push harbor.biu2ful.xyz/library/mysql:5.6</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215828.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从Harbor仓库拉取镜像</span><br><span class="line">docker image rm harbor.biu2ful.xyz/library/mysql:5.6</span><br><span class="line">docker pull harbor.biu2ful.xyz/library/mysql:5.6</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215855.png" alt></p><h3 id="5、构建业务基础镜像"><a href="#5、构建业务基础镜像" class="headerlink" title="5、构建业务基础镜像"></a>5、构建业务基础镜像</h3><h4 id="5-1-编写Dockerfile"><a href="#5-1-编写Dockerfile" class="headerlink" title="5.1 编写Dockerfile"></a>5.1 编写Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER staryjie@gmail.com</span><br><span class="line"></span><br><span class="line">RUN yum install unzip iproute -y</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_141/</span><br><span class="line">ADD apache-tomcat-8.0.46.tar.gz /usr/local</span><br><span class="line">RUN mv /usr/local/apache-tomcat-8.0.46.tar.gz /usr/local/tomcat</span><br><span class="line">WORKDIR /usr/local/tomcat</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;./bin/catalina.sh&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure><h4 id="5-2-通过Dockerfile构建镜像"><a href="#5-2-通过Dockerfile构建镜像" class="headerlink" title="5.2 通过Dockerfile构建镜像"></a>5.2 通过Dockerfile构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tomcat:v1 .</span><br></pre></td></tr></table></figure><h4 id="5-3-将镜像推送到Harbor仓库"><a href="#5-3-将镜像推送到Harbor仓库" class="headerlink" title="5.3 将镜像推送到Harbor仓库"></a>5.3 将镜像推送到Harbor仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag tomcat:v1 harbor.biu2ful.xyz/test/tomcat:v</span><br><span class="line">docker push harbor.biu2ful.xyz/test/tomcat:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629163516.png" alt></p><h3 id="6、测试服务器安装Docker"><a href="#6、测试服务器安装Docker" class="headerlink" title="6、测试服务器安装Docker"></a>6、测试服务器安装Docker</h3><h4 id="6-1-安装依赖"><a href="#6-1-安装依赖" class="headerlink" title="6.1 安装依赖"></a>6.1 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 chrony</span><br></pre></td></tr></table></figure><h5 id="6-2-添加阿里云的docker仓库"><a href="#6-2-添加阿里云的docker仓库" class="headerlink" title="6.2 添加阿里云的docker仓库"></a>6.2 添加阿里云的docker仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h5 id="6-3-安装docker"><a href="#6-3-安装docker" class="headerlink" title="6.3 安装docker"></a>6.3 安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h5 id="6-4-启动并设置开机自启"><a href="#6-4-启动并设置开机自启" class="headerlink" title="6.4 启动并设置开机自启"></a>6.4 启动并设置开机自启</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><h5 id="6-5-配置daocloud加速"><a href="#6-5-配置daocloud加速" class="headerlink" title="6.5 配置daocloud加速"></a>6.5 配置daocloud加速</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start chronyd.service</span><br><span class="line">systemctl enable chronyd.service</span><br></pre></td></tr></table></figure><h5 id="6-6-重启docker服务"><a href="#6-6-重启docker服务" class="headerlink" title="6.6 重启docker服务"></a>6.6 重启docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h5 id="6-7-检查是否正常安装docker"><a href="#6-7-检查是否正常安装docker" class="headerlink" title="6.7 检查是否正常安装docker"></a>6.7 检查是否正常安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p> 下面是一个很简单的安装脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1.安装依赖</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 chrony</span><br><span class="line"><span class="meta">#</span> 2.添加阿里云的docker仓库</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span> 3.安装docker</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span> 4.启动并设置开机自启</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="meta">#</span> 5. 配置daocloud加速</span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="meta">#</span> 6.重启docker服务</span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta">#</span> 7.检查是否正常安装docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="7、Jenkins安装"><a href="#7、Jenkins安装" class="headerlink" title="7、Jenkins安装"></a>7、Jenkins安装</h3><h4 id="7-1-构建jenkins镜像"><a href="#7-1-构建jenkins镜像" class="headerlink" title="7.1 构建jenkins镜像"></a>7.1 构建jenkins镜像</h4><p>​        编写Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM jenkins/jenkins</span><br><span class="line">USER root</span><br><span class="line">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; wget http://static.staryjie.com/sources.list -O /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y git libltdl-dev</span><br></pre></td></tr></table></figure><p>​        通过Dockerfile构建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jenkins:v1 .</span><br></pre></td></tr></table></figure><blockquote><p>在安装的时候发现版本太低的Jenkins很多插件都装不上，建议使用最新版本的Jenkins。</p><p><a href="https://www.cnblogs.com/sxdcgaq8080/p/10489326.html" target="_blank" rel="noopener">https://www.cnblogs.com/sxdcgaq8080/p/10489326.html</a></p></blockquote><h4 id="7-2-通过镜像启动容器"><a href="#7-2-通过镜像启动容器" class="headerlink" title="7.2 通过镜像启动容器"></a>7.2 通过镜像启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name jenkins \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 50000:50000 \</span><br><span class="line">-v /var/jenkins_home/:/var/jenkins_home \</span><br><span class="line">-v /usr/local/maven3.6/:/usr/local/maven \</span><br><span class="line">-v /usr/local/jdk1.8.0_141/:/usr/local/jdk \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v $(which docker):/usr/bin/docker \</span><br><span class="line">-v ~/.ssh:/root/.ssh \</span><br><span class="line">jenkins:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629160309.png" alt></p><h4 id="7-3-浏览器访问http-ip-8080"><a href="#7-3-浏览器访问http-ip-8080" class="headerlink" title="7.3 浏览器访问http://ip:8080"></a>7.3 浏览器访问<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a></h4><p><img src="http://static.staryjie.com/static/images/20190629160423.png" alt></p><h4 id="7-4-自定义安装Jenkins插件"><a href="#7-4-自定义安装Jenkins插件" class="headerlink" title="7.4 自定义安装Jenkins插件"></a>7.4 自定义安装Jenkins插件</h4><p><img src="http://static.staryjie.com/static/images/20190629161631.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190629161741.png" alt></p><h4 id="7-5-创建管理员账号"><a href="#7-5-创建管理员账号" class="headerlink" title="7.5 创建管理员账号"></a>7.5 创建管理员账号</h4><p><img src="http://static.staryjie.com/static/images/20190630124544.png" alt></p><h3 id="8、Jenkins基本配置"><a href="#8、Jenkins基本配置" class="headerlink" title="8、Jenkins基本配置"></a>8、Jenkins基本配置</h3><h4 id="8-1-配置Jenkins的URL"><a href="#8-1-配置Jenkins的URL" class="headerlink" title="8.1 配置Jenkins的URL"></a>8.1 配置Jenkins的URL</h4><p>​        根据自己的实际情况设置，可以直接是ip+端口，或者域名通过nginx或者其他web中间件代理。</p><p><img src="http://static.staryjie.com/static/images/20190630124656.png" alt></p><h4 id="8-2-开始使用Jenkins"><a href="#8-2-开始使用Jenkins" class="headerlink" title="8.2 开始使用Jenkins"></a>8.2 开始使用Jenkins</h4><p><img src="http://static.staryjie.com/static/images/20190630125049.png" alt></p><p>开始使用Jenkins之后进到Jenkins的首页：</p><p><img src="http://static.staryjie.com/static/images/20190630125137.png" alt></p><h4 id="8-3-系统管理-全局配置"><a href="#8-3-系统管理-全局配置" class="headerlink" title="8.3 系统管理-全局配置"></a>8.3 系统管理-全局配置</h4><h5 id="8-3-1-配置JDK"><a href="#8-3-1-配置JDK" class="headerlink" title="8.3.1 配置JDK"></a>8.3.1 配置JDK</h5><p>​        在启动jenkins容器的时候我们将宿主机的jdk挂载到了容器中，所以不需要勾选自动安装，只需要将启动时候指定的路径填写好即可：</p><p><img src="http://static.staryjie.com/static/images/20190630125555.png" alt></p><h5 id="8-3-2-配置git"><a href="#8-3-2-配置git" class="headerlink" title="8.3.2 配置git"></a>8.3.2 配置git</h5><p>​        git是通过yum安装的，所以配置直接使用默认的就可以：</p><p><img src="http://static.staryjie.com/static/images/20190630125837.png" alt></p><h5 id="8-3-3-配置Maven"><a href="#8-3-3-配置Maven" class="headerlink" title="8.3.3 配置Maven"></a>8.3.3 配置Maven</h5><p>​        和jdk配置一样，在启动jenkins容器的时候就已经将宿主机的Maven挂载在容器中了，所以只要配置好路径即可：</p><p><img src="http://static.staryjie.com/static/images/20190630130047.png" alt></p><h4 id="8-4-系统管理-系统配置"><a href="#8-4-系统管理-系统配置" class="headerlink" title="8.4 系统管理-系统配置"></a>8.4 系统管理-系统配置</h4><h5 id="8-4-1-SSH-remote-hosts配置"><a href="#8-4-1-SSH-remote-hosts配置" class="headerlink" title="8.4.1 SSH remote hosts配置"></a>8.4.1 SSH remote hosts配置</h5><p>​        增加一个Jenkins要访问的docker主机的ip，为了实现免密码交互，将Jenkins主机的公钥发送到docker主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@10.0.0.30</span><br></pre></td></tr></table></figure><p>​        在Jenkins中添加凭据：</p><p><img src="http://static.staryjie.com/static/images/20190630131002.png" alt></p><p>​        在系统配置中添加SSH remote hosts配置：</p><p><img src="http://static.staryjie.com/static/images/20190630131541.png" alt></p><h3 id="9、Jenkins创建项目"><a href="#9、Jenkins创建项目" class="headerlink" title="9、Jenkins创建项目"></a>9、Jenkins创建项目</h3><h4 id="9-1-创建项目"><a href="#9-1-创建项目" class="headerlink" title="9.1 创建项目"></a>9.1 创建项目</h4><p>​        在首页有一个创建新任务的选项。</p><p><img src="http://static.staryjie.com/static/images/20190630131704.png" alt></p><p>​        创建一个Maven的项目：</p><p><img src="http://static.staryjie.com/static/images/20190630131803.png" alt></p><h4 id="9-2-项目配置"><a href="#9-2-项目配置" class="headerlink" title="9.2 项目配置"></a>9.2 项目配置</h4><h5 id="9-2-1-源码管理"><a href="#9-2-1-源码管理" class="headerlink" title="9.2.1 源码管理"></a>9.2.1 源码管理</h5><p>​        在源码管理选项中选择自己的源码管理方式和源码拉取地址：</p><p><img src="http://static.staryjie.com/static/images/20190630132104.png" alt></p><h5 id="9-2-2-Maven构建前-配置Maven跳过项目测试用例"><a href="#9-2-2-Maven构建前-配置Maven跳过项目测试用例" class="headerlink" title="9.2.2 Maven构建前-配置Maven跳过项目测试用例"></a>9.2.2 Maven构建前-配置Maven跳过项目测试用例</h5><p>​        参数是：clean package -Dmaven.test.skip=true</p><p><img src="http://static.staryjie.com/static/images/20190630132326.png" alt></p><h5 id="9-2-3-Maven构建后配置"><a href="#9-2-3-Maven构建后配置" class="headerlink" title="9.2.3 Maven构建后配置"></a>9.2.3 Maven构建后配置</h5><p>​        通过构建后配置将war包基于基础业务镜像进行构建新的镜像，并上传到Harbor镜像仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE</span><br><span class="line">docker login -u admin -p Harbor123456 harbor.biu2ful.xyz</span><br><span class="line">cat &gt; Dockerfile &lt;&lt; EOF</span><br><span class="line">FROM harbor.biu2ful.xyz/test/tomcat:v1</span><br><span class="line">MAINTAINER staryjie@gmail.com</span><br><span class="line"></span><br><span class="line">COPY target/solo.war /tmp/ROOT.war</span><br><span class="line">RUN rm -rf /usr/local/tomcat/webapps/* &amp;&amp;  \</span><br><span class="line">         unzip /tmp/ROOT.war -d /usr/local/tomcat/webapps/ROOT &amp;&amp; \</span><br><span class="line">         rm -f /tmp/ROOT.war</span><br><span class="line">ENTRYPOINT ["./bin/catalina.sh", "run"]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t harbor.biu2ful.xyz/test/solo:v1 .</span><br><span class="line">docker push harbor.biu2ful.xyz/test/solo:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630143110.png" alt></p><h5 id="9-2-4-构建完成后在远程主机上执行命令"><a href="#9-2-4-构建完成后在远程主机上执行命令" class="headerlink" title="9.2.4 构建完成后在远程主机上执行命令"></a>9.2.4 构建完成后在远程主机上执行命令</h5><p>​        上一步将新构建的镜像推送到Harbor仓库，这一步通过仓库的镜像在远程主机上启动一个容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line">docker login -uadmin -pHarbor123456 harbor.biu2ful.xyz</span><br><span class="line">docker rm -f solo|true</span><br><span class="line">docker image rm -f harbor.biu2ful.xyz/test/solo:v1|true</span><br><span class="line">docker run -d --name solo -p 8888:8080 -v /usr/local/jdk1.8.0_141/:/usr/local/jdk1.8.0_141/ harbor.biu2ful.xyz/test/solo:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630144948.png" alt></p><h3 id="10、测试"><a href="#10、测试" class="headerlink" title="10、测试"></a>10、测试</h3><h4 id="10-1-将项目代码推送到Git服务器"><a href="#10-1-将项目代码推送到Git服务器" class="headerlink" title="10.1 将项目代码推送到Git服务器"></a>10.1 将项目代码推送到Git服务器</h4><p>​        这里通过一个GitHub上java的开源博客系统来测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.将Git服务器新建的仓库clone到本地</span><br><span class="line">cd /root/cicd &amp;&amp; git clone root@10.0.0.20:/home/git/solo.git</span><br><span class="line"><span class="meta">#</span> 2.获取代码</span><br><span class="line">git clone https://github.com/b3log/solo.git</span><br><span class="line"><span class="meta">#</span> 3.将GitHub上clone的代码复制到从Git仓库clone的空仓库里面</span><br><span class="line">cp ./solo-master/* ./solo/ -rf</span><br><span class="line"><span class="meta">#</span> 4.将代码通过git提交到Git服务器创建好的仓库</span><br><span class="line">git config --global user.email "staryjie@163.com"</span><br><span class="line">git config --global user.name "staryjie"</span><br><span class="line">git add .</span><br><span class="line">git commit -m "all"</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h4 id="10-2-Jenkins构建"><a href="#10-2-Jenkins构建" class="headerlink" title="10.2 Jenkins构建"></a>10.2 Jenkins构建</h4><h5 id="10-2-1-构建项目"><a href="#10-2-1-构建项目" class="headerlink" title="10.2.1 构建项目"></a>10.2.1 构建项目</h5><p>​        通过上面已经创建的Maven项目solo_blog来构建：</p><p><img src="http://static.staryjie.com/static/images/20190630133041.png" alt></p><h5 id="10-2-3-查看控制台输出"><a href="#10-2-3-查看控制台输出" class="headerlink" title="10.2.3 查看控制台输出"></a>10.2.3 查看控制台输出</h5><p>​        点击立即构建之后就可以点击查看控制台输出来查看整个构建过程:</p><p><img src="http://static.staryjie.com/static/images/20190630133217.png" alt></p><p>​        第一次构建需要花费的时间比较多，耐心等待一会儿就可以看到构建结果：</p><p><img src="http://static.staryjie.com/static/images/20190630134051.png" alt></p><p>​        在服务器上查看构建好的war包：</p><p><img src="http://static.staryjie.com/static/images/20190630134258.png" alt></p><p>​        添加构建后将war包和基础镜像构建新镜像并推送到Harbor仓库的配置后，再次构建：</p><p><img src="http://static.staryjie.com/static/images/20190630143336.png" alt></p><p>​        在Harbor仓库查看镜像：</p><p><img src="http://static.staryjie.com/static/images/20190630143506.png" alt></p><p>​        配置了远程主机拉取镜像并运行容器之后，查看Jenkins执行结果：</p><p><img src="http://static.staryjie.com/static/images/20190630211739.png" alt></p><p>​        在远程主机查看是否有对应的镜像和已经运行的叫solo的容器：</p><p><img src="http://static.staryjie.com/static/images/20190630211617.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190630213434.png" alt></p><p>​        在浏览器上访问：<a href="http://10.0.0.30:8888" target="_blank" rel="noopener">http://10.0.0.30:8888</a></p><p><img src="http://static.staryjie.com/static/images/20190630211855.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、CI-CD介绍&quot;&gt;&lt;a href=&quot;#1、CI-CD介绍&quot; class=&quot;headerlink&quot; title=&quot;1、CI/CD介绍&quot;&gt;&lt;/a&gt;1、CI/CD介绍&lt;/h3&gt;&lt;p&gt;​        CI/CD是一个持续的闭环的流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.staryjie.com/static/images/20190626160504.png&quot; alt=&quot;CI/CD&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
